{
  "uid" : "a93f757543a238eb",
  "name" : "购买折扣商品",
  "fullName" : "case.test_order#test_order",
  "historyId" : "be12defab3a7cc19ce2904e02f964520",
  "time" : {
    "start" : 1615079444813,
    "stop" : 1615079444811,
    "duration" : -2
  },
  "description" : "购买折扣商品",
  "descriptionHtml" : "<p>购买折扣商品</p>\n",
  "status" : "failed",
  "statusMessage" : "pytest_assume.plugin.FailedAssumption: \n5 Failed Assumptions:\n\ncase\\test_order.py:55: AssumptionFailure\n>>\tpytest.assume(cart_sql_result != None, \"数据库购物车表中没有添加的数据\")\nAssertionError: 数据库购物车表中没有添加的数据\nassert False\n\ncase\\test_order.py:71: AssumptionFailure\n>>\tpytest.assume(promotionAmount == promotionAmount_result, \"优惠金额不正确\")\nAssertionError: 优惠金额不正确\nassert False\n\ncase\\test_order.py:72: AssumptionFailure\n>>\tpytest.assume(payAmount == payAmount_result, \"支付金额不正确\")\nAssertionError: 支付金额不正确\nassert False\n\ncase\\test_order.py:101: AssumptionFailure\n>>\t\"数据库中购物车表该条记录没有变成delete_status=1\")\nAssertionError: 数据库中购物车表该条记录没有变成delete_status=1\nassert False\n\ncase\\test_order.py:128: AssumptionFailure\n>>\tpytest.assume(stock - quantitys == stock_0, '数据库该商品库存数量前后差值不等于购买商品的数量')\nAssertionError: 数据库该商品库存数量前后差值不等于购买商品的数量\nassert False",
  "statusTrace" : "tp = <class 'pytest_assume.plugin.FailedAssumption'>, value = None, tb = None\n\n    def reraise(tp, value, tb=None):\n        try:\n            if value is None:\n                value = tp()\n            if value.__traceback__ is not tb:\n>               raise value.with_traceback(tb)\nE               pytest_assume.plugin.FailedAssumption: \nE               5 Failed Assumptions:\nE               \nE               case\\test_order.py:55: AssumptionFailure\nE               >>\tpytest.assume(cart_sql_result != None, \"数据库购物车表中没有添加的数据\")\nE               AssertionError: 数据库购物车表中没有添加的数据\nE               assert False\nE               \nE               case\\test_order.py:71: AssumptionFailure\nE               >>\tpytest.assume(promotionAmount == promotionAmount_result, \"优惠金额不正确\")\nE               AssertionError: 优惠金额不正确\nE               assert False\nE               \nE               case\\test_order.py:72: AssumptionFailure\nE               >>\tpytest.assume(payAmount == payAmount_result, \"支付金额不正确\")\nE               AssertionError: 支付金额不正确\nE               assert False\nE               \nE               case\\test_order.py:101: AssumptionFailure\nE               >>\t\"数据库中购物车表该条记录没有变成delete_status=1\")\nE               AssertionError: 数据库中购物车表该条记录没有变成delete_status=1\nE               assert False\nE               \nE               case\\test_order.py:128: AssumptionFailure\nE               >>\tpytest.assume(stock - quantitys == stock_0, '数据库该商品库存数量前后差值不等于购买商品的数量')\nE               AssertionError: 数据库该商品库存数量前后差值不等于购买商品的数量\nE               assert False\n\nd:\\python\\lib\\site-packages\\six.py:702: FailedAssumption",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "description" : "购买折扣商品",
    "status" : "failed",
    "statusMessage" : "pytest_assume.plugin.FailedAssumption: \n5 Failed Assumptions:\n\ncase\\test_order.py:55: AssumptionFailure\n>>\tpytest.assume(cart_sql_result != None, \"数据库购物车表中没有添加的数据\")\nAssertionError: 数据库购物车表中没有添加的数据\nassert False\n\ncase\\test_order.py:71: AssumptionFailure\n>>\tpytest.assume(promotionAmount == promotionAmount_result, \"优惠金额不正确\")\nAssertionError: 优惠金额不正确\nassert False\n\ncase\\test_order.py:72: AssumptionFailure\n>>\tpytest.assume(payAmount == payAmount_result, \"支付金额不正确\")\nAssertionError: 支付金额不正确\nassert False\n\ncase\\test_order.py:101: AssumptionFailure\n>>\t\"数据库中购物车表该条记录没有变成delete_status=1\")\nAssertionError: 数据库中购物车表该条记录没有变成delete_status=1\nassert False\n\ncase\\test_order.py:128: AssumptionFailure\n>>\tpytest.assume(stock - quantitys == stock_0, '数据库该商品库存数量前后差值不等于购买商品的数量')\nAssertionError: 数据库该商品库存数量前后差值不等于购买商品的数量\nassert False",
    "statusTrace" : "tp = <class 'pytest_assume.plugin.FailedAssumption'>, value = None, tb = None\n\n    def reraise(tp, value, tb=None):\n        try:\n            if value is None:\n                value = tp()\n            if value.__traceback__ is not tb:\n>               raise value.with_traceback(tb)\nE               pytest_assume.plugin.FailedAssumption: \nE               5 Failed Assumptions:\nE               \nE               case\\test_order.py:55: AssumptionFailure\nE               >>\tpytest.assume(cart_sql_result != None, \"数据库购物车表中没有添加的数据\")\nE               AssertionError: 数据库购物车表中没有添加的数据\nE               assert False\nE               \nE               case\\test_order.py:71: AssumptionFailure\nE               >>\tpytest.assume(promotionAmount == promotionAmount_result, \"优惠金额不正确\")\nE               AssertionError: 优惠金额不正确\nE               assert False\nE               \nE               case\\test_order.py:72: AssumptionFailure\nE               >>\tpytest.assume(payAmount == payAmount_result, \"支付金额不正确\")\nE               AssertionError: 支付金额不正确\nE               assert False\nE               \nE               case\\test_order.py:101: AssumptionFailure\nE               >>\t\"数据库中购物车表该条记录没有变成delete_status=1\")\nE               AssertionError: 数据库中购物车表该条记录没有变成delete_status=1\nE               assert False\nE               \nE               case\\test_order.py:128: AssumptionFailure\nE               >>\tpytest.assume(stock - quantitys == stock_0, '数据库该商品库存数量前后差值不等于购买商品的数量')\nE               AssertionError: 数据库该商品库存数量前后差值不等于购买商品的数量\nE               assert False\n\nd:\\python\\lib\\site-packages\\six.py:702: FailedAssumption",
    "steps" : [ {
      "name" : "添加购物车",
      "time" : {
        "start" : 1615079445513,
        "stop" : 1615079446180,
        "duration" : 667
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "确认订单",
      "time" : {
        "start" : 1615079446180,
        "stop" : 1615079446813,
        "duration" : 633
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "生成订单",
      "time" : {
        "start" : 1615079446813,
        "stop" : 1615079449030,
        "duration" : 2217
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    }, {
      "name" : "支付回调",
      "time" : {
        "start" : 1615079449030,
        "stop" : 1615079449708,
        "duration" : 678
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ ],
      "shouldDisplayMessage" : false,
      "attachmentsCount" : 0,
      "stepsCount" : 0,
      "hasContent" : false
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 0,
    "stepsCount" : 4,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "story",
    "value" : "购物促销活动商品"
  }, {
    "name" : "feature",
    "value" : "购物流程"
  }, {
    "name" : "parentSuite",
    "value" : "case"
  }, {
    "name" : "suite",
    "value" : "test_order"
  }, {
    "name" : "host",
    "value" : "DESKTOP-BE07TO9"
  }, {
    "name" : "thread",
    "value" : "9988-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "case.test_order"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "quantitys",
    "value" : "1"
  } ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Product defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "a93f757543a238eb.json",
  "parameterValues" : [ "1" ]
}